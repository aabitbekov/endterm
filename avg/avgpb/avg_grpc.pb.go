// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package avgpb

import (
	context "context"
	"fmt"
	"github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	"math"
)
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion3



type AvgRequest struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int64    `json:"-"`
}

type AvgResponse struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int64    `json:"-"`
}
// AvgServiceClient is the client API for AvgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvgServiceClient interface {
	StreamOfNumber(ctx context.Context, opts ...grpc.CallOption) (AvgService_StreamOfNumberClient, error)
}

type avgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvgServiceClient(cc grpc.ClientConnInterface) AvgServiceClient {
	return &avgServiceClient{cc}
}

func (c *avgServiceClient) StreamOfNumber(ctx context.Context, opts ...grpc.CallOption) (AvgService_StreamOfNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &AvgService_ServiceDesc.Streams[0], "/avg.AvgService/StreamOfNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &avgServiceStreamOfNumberClient{stream}
	return x, nil
}

type AvgService_StreamOfNumberClient interface {
	Send(*AvgRequest) error
	CloseAndRecv() (*AvgResponse, error)
	grpc.ClientStream
}

type avgServiceStreamOfNumberClient struct {
	grpc.ClientStream
}

func (x *avgServiceStreamOfNumberClient) Send(m *AvgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *avgServiceStreamOfNumberClient) CloseAndRecv() (*AvgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AvgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvgServiceServer is the server API for AvgService service.
// All implementations must embed UnimplementedAvgServiceServer
// for forward compatibility
type AvgServiceServer interface {
	StreamOfNumber(AvgService_StreamOfNumberServer) error
	mustEmbedUnimplementedAvgServiceServer()
}

// UnimplementedAvgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvgServiceServer struct {
}

func (UnimplementedAvgServiceServer) StreamOfNumber(AvgService_StreamOfNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOfNumber not implemented")
}
func (UnimplementedAvgServiceServer) mustEmbedUnimplementedAvgServiceServer() {}

// UnsafeAvgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvgServiceServer will
// result in compilation errors.
type UnsafeAvgServiceServer interface {
	mustEmbedUnimplementedAvgServiceServer()
}

func RegisterAvgServiceServer(s grpc.ServiceRegistrar, srv AvgServiceServer) {
	s.RegisterService(&AvgService_ServiceDesc, srv)
}

func _AvgService_StreamOfNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvgServiceServer).StreamOfNumber(&avgServiceStreamOfNumberServer{stream})
}

type AvgService_StreamOfNumberServer interface {
	SendAndClose(*AvgResponse) error
	Recv() (*AvgRequest, error)
	grpc.ServerStream
}

type avgServiceStreamOfNumberServer struct {
	grpc.ServerStream
}

func (x *avgServiceStreamOfNumberServer) SendAndClose(m *AvgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *avgServiceStreamOfNumberServer) Recv() (*AvgRequest, error) {
	m := new(AvgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvgService_ServiceDesc is the grpc.ServiceDesc for AvgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avg.AvgService",
	HandlerType: (*AvgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOfNumber",
			Handler:       _AvgService_StreamOfNumber_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "avg.proto",
}
